knitr::opts_chunk$set(echo = TRUE)
# Cargar librerías
library(lubridate)
library(tidyverse)
library(tidyverse)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar datos de precios minoristas
dane_99_18 = readxl::read_excel("Precios DANE\\OUTPUT_DANE\\precios_unadj_DANE_1999_2018.xlsx")
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar datos de precios minoristas
dane_99_18 = readxl::read_excel("Precios DANE\\OUTPUT_DANE\\precios_unadj_DANE_1999_2018.xlsx")
library(janitor)
library(tidyverse)
setwd("C:/Users/Portatil/Desktop/Least-cost-diets-and-affordability/Proyecto Interno")
ipc_subclase = readxl::read_excel("var-ipc/XYZ_Correlativa-ENPH-IPC-2008.xlsx") %>% janitor::clean_names() %>% mutate(clase = clase_9,
articulo = articulo_11) %>%
select(clase, gasto_basico, articulo, descripcion_ipc)
head(ipc_subclase[11:nrow(ipc_subclase),], 30)
setwd("C:/Users/Portatil/Desktop/Least-cost-diets-and-affordability/Proyecto Interno")
dane_99_18 = readxl::read_excel("Precios DANE\\OUTPUT_DANE\\precios_unadj_DANE_1999_2018.xlsx")
head(dane_99_18[c("ano", "mes_num", "nombre_ciudad", "codigo_articulo",
"articulo", "precio_500g")], 30)
setwd("C:/Users/Portatil/Desktop/Least-cost-diets-and-affordability/Proyecto Interno")
# Cargar variación del IPC
var_ipc = readxl::read_excel("var-ipc\\IPC.xls") %>% janitor::clean_names()
# Recodificar ciudades
var_ipc$ciudad[var_ipc$ciudad == "CARTAGENA DE INDIAS"] = "CARTAGENA"
var_ipc$ciudad[var_ipc$ciudad == "BOGOTÁ, D.C."] = "BOGOTÁ D.C."
# Crear variable codigo_subclase
var_ipc$cod_subclase = paste0(substr(var_ipc$subclase, 1, 8))
head(var_ipc[c("ano", "mes", "ciudad","division", "grupo", "clase", "subclase",
"cod_subclase", "numero_indice")], 30)
setwd("C:/Users/Portatil/Desktop/Least-cost-diets-and-affordability/Proyecto Interno")
#Tablas correlativas
correlativa = readxl::read_excel("var-ipc\\correlativa_ipc.xlsx")
# Llenar por celdas combinadas
correlativa <- correlativa %>%
fill(subclase, ipc, .direction = "down")
head(correlativa, 30)
# Cargar librerías
library(lubridate)
library(tidyverse)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar datos de precios minoristas
dane_99_18 = readxl::read_excel("Precios DANE\\OUTPUT_DANE\\precios_unadj_DANE_1999_2018.xlsx")
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
######################################
###--------------------------------###
### Datos sobre precios minoristas ###
###--------------------------------###
######################################
# Cargar datos de precios minoristas
dane_99_18 = readxl::read_excel("Precios DANE\\OUTPUT_DANE\\precios_unadj_DANE_1999_2018.xlsx")
ciudad.input = c("CALI")
dane_99_18 = dane_99_18 %>% filter(nombre_ciudad %in% ciudad.input)
# Recodificar fecha
dane_99_18$fecha = as.Date(paste(dane_99_18$ano,
dane_99_18$mes_num,
"01", sep = "-"))
# Crear la variable "código subclase"
dane_99_18$cod_subclase = paste0("0",substr(dane_99_18$codigo_articulo, 1, 6), "0")
# Eliminamos > 2018-3
dane_99_18 = dane_99_18 %>% filter(fecha < "2018-04-01")
# Prueba con una ciudad y una alimento
city_i = levels(as.factor(dane_99_18$nombre_ciudad))
food_j = levels(as.factor(dane_99_18$articulo))
# Base de datos fallidos
list.fail = vector(mode = "list")
i = 20
i = 1
j = 20
print(paste0(city_i[i], " - ", food_j[j]))
i = 1
j = 25
print(paste0(city_i[i], " - ", food_j[j]))
i = 1
j = 1
print(paste0(city_i[i], " - ", food_j[j]))
# Base de datos aux.
df.aux = dane_99_18 %>% filter(nombre_ciudad == city_i[i] &
articulo == food_j[j])
# Filtrar fechas_75
train.df = df.aux %>% dplyr::filter(fecha <= "2015-01-01")
test.df = df.aux %>% filter(fecha >= "2015-01-01")
if (length(test.df$precio_500g) == 0) {
df.aux2 = dane_99_18 %>% filter(articulo == food_j[j])
list.fail[[length(list.fail) + 1]] <- data.frame(
ciudad = city_i[i],
cod_articulo = unique(df.aux2$codigo_articulo),
cod_subclase = unique(df.aux2$cod_subclase),
articulo = food_j[j]
)
} else {
# Recuperar código en tablas correlativas
# Tabla correlativa
correlativa = readxl::read_excel("var-ipc\\correlativa_ipc.xlsx")
# Llenar por celdas combinadas
correlativa <- correlativa %>%
fill(subclase, ipc, .direction = "down") %>%
mutate(cod_subclase = paste0("0",
gasto_basico, "00"))
# Recuperar código ipc
test.df2 = test.df %>% left_join(correlativa[c("cod_subclase",
"subclase")],
by = "cod_subclase")
# Condicional (si hay más de un código que coincide, entonces
# usamos una correlativa más desagregada)
if (length(levels(as.factor(test.df2$subclase))) > 1){
corr_producto = readxl::read_excel("var-ipc\\correlativa_ipc_articulos.xlsx") %>%
mutate(codigo_articulo = cod_dane,
subclase = cod_ipc)
test.df = test.df %>% left_join(corr_producto[c("codigo_articulo",
"subclase")],
by = "codigo_articulo")
} else {
test.df = test.df2
}
# Código de subclase (formato)
test.df$subclase = paste0(test.df$subclase,"00")
#######################################
###---------------------------------###
### Variación del ÍPC: datos > 2015 ###
###---------------------------------###
#######################################
# Cargar variación del IPC
var_ipc = readxl::read_excel("var-ipc\\IPC.xls") %>% janitor::clean_names()
# Recodificar ciudades
var_ipc$ciudad[var_ipc$ciudad == "CARTAGENA DE INDIAS"] = "CARTAGENA"
var_ipc$ciudad[var_ipc$ciudad == "BOGOTÁ, D.C."] = "BOGOTÁ D.C."
# Crear variable codigo_subclase
var_ipc$cod_subclase = paste0(substr(var_ipc$subclase, 1, 8))
# Filtrar para la ciudad de interés
var_ipc = var_ipc %>% filter(ciudad == city_i[i] &
as.numeric(cod_subclase) == as.numeric(unique(test.df$subclase)))
if (length(var_ipc$numero_indice) == 0) {
list.fail[[length(list.fail) + 1]] <- data.frame(
ciudad = city_i[i],
cod_articulo = unique(df.aux$codigo_articulo),
cod_subclase = unique(df.aux$cod_subclase),
articulo = unique(df.aux$articulo)
)
} else {
# Formato long
library(tidyverse)
meses_esp <- c("Ene", "Feb", "Mar", "Abr", "May", "Jun",
"Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
df_ipc <- var_ipc %>%
mutate(
mes_num = match(mes, meses_esp),
ipc = numero_indice,
ano = as.numeric(ano)
) %>%
select(ano, mes_num, ipc) %>%
arrange(ano, mes_num)
# Merge
ipc_df = test.df %>% full_join(df_ipc, by = c("ano", "mes_num")) %>%
select(fecha, ano, mes_num, ciudad, nombre_ciudad,
cod_subclase,
codigo_articulo, articulo, precio_500g,ipc)%>%
arrange(fecha) %>%
mutate(precio_hat = NA)
# Llenar precios hacia adelante usando la variación del IPC
ipc_df$precio_hat[ipc_df$fecha == "2015-01-01" &
!is.na(ipc_df$fecha)] = ipc_df$precio_500g[ipc_df$fecha == "2015-01-01" &
!is.na(ipc_df$fecha)]
for (k in 2:nrow(ipc_df)) {
if (is.na(ipc_df$precio_hat[k])) {
ipc_df$precio_hat[k] = ipc_df$precio_hat[k - 1] * (ipc_df$ipc[k] / ipc_df$ipc[k - 1])
}
}
# Unir con la base de datos
test.df2 = test.df %>% left_join(ipc_df[c("fecha", "ipc",
"precio_hat")],
by = "fecha") %>%
select(fecha, nombre_ciudad, articulo, precio_500g,
precio_hat)
# Unir con la base de datos de entrenamiento
test.df2 = bind_rows(train.df, test.df2)
# Validar la estimación:
plot_aux = test.df2 %>%
ggplot(aes(x = fecha)) +
geom_line(aes(y = precio_500g, color = "Precio real"), size = 1) +
geom_line(aes(y = precio_hat, color = "Precio estimado"), linetype = "dashed", size = 1) +
labs(
title = "Comparación entre precio real y estimado",
subtitle = paste0(unique(test.df2$nombre_ciudad),
" - ",
unique(test.df2$articulo)),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio real" = "black",
"Precio estimado" = "red")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
print(plot_aux)
}
}
length(test.df$precio_500g) == 0
correlativa
correlativa <- correlativa %>%
fill(subclase, ipc, .direction = "down") %>%
mutate(cod_subclase = paste0("0",
gasto_basico, "00"))
test.df2 = test.df %>% left_join(correlativa[c("cod_subclase",
"subclase")],
by = "cod_subclase")
length(levels(as.factor(test.df2$subclase))) > 1
test.df = test.df2
test.df$subclase = paste0(test.df$subclase,"00")
var_ipc
var_ipc$ciudad[var_ipc$ciudad == "CARTAGENA DE INDIAS"] = "CARTAGENA"
var_ipc$ciudad[var_ipc$ciudad == "BOGOTÁ, D.C."] = "BOGOTÁ D.C."
var_ipc$cod_subclase = paste0(substr(var_ipc$subclase, 1, 8))
# Filtrar para la ciudad de interés
var_ipc = var_ipc %>% filter(ciudad == city_i[i] &
as.numeric(cod_subclase) == as.numeric(unique(test.df$subclase)))
length(var_ipc$numero_indice) == 0
library(tidyverse)
meses_esp <- c("Ene", "Feb", "Mar", "Abr", "May", "Jun",
"Jul", "Ago", "Sep", "Oct", "Nov", "Dic")
df_ipc <- var_ipc %>%
mutate(
mes_num = match(mes, meses_esp),
ipc = numero_indice,
ano = as.numeric(ano)
) %>%
select(ano, mes_num, ipc) %>%
arrange(ano, mes_num)
# Merge
ipc_df = test.df %>% full_join(df_ipc, by = c("ano", "mes_num")) %>%
select(fecha, ano, mes_num, ciudad, nombre_ciudad,
cod_subclase,
codigo_articulo, articulo, precio_500g,ipc)%>%
arrange(fecha) %>%
mutate(precio_hat = NA)
# Llenar precios hacia adelante usando la variación del IPC
ipc_df$precio_hat[ipc_df$fecha == "2015-01-01" &
!is.na(ipc_df$fecha)] = ipc_df$precio_500g[ipc_df$fecha == "2015-01-01" &
!is.na(ipc_df$fecha)]
for (k in 2:nrow(ipc_df)) {
if (is.na(ipc_df$precio_hat[k])) {
ipc_df$precio_hat[k] = ipc_df$precio_hat[k - 1] * (ipc_df$ipc[k] / ipc_df$ipc[k - 1])
}
}
# Unir con la base de datos
test.df2 = test.df %>% left_join(ipc_df[c("fecha", "ipc",
"precio_hat")],
by = "fecha") %>%
select(fecha, nombre_ciudad, articulo, precio_500g,
precio_hat)
# Unir con la base de datos de entrenamiento
test.df2 = bind_rows(train.df, test.df2)
test.df2
View(test.df2)
# Cálculo de la métrica sobre el conjunto de validación
# RMSE
test.df2$precio_500g
test.df2$precio_hat
# Métricas
list.rmse = vector(mode = "list")
list.mape = vector(mode = "list")
# Cálculo de la métrica sobre el conjunto de validación
valid_df <- test.df2 %>% filter(!is.na(precio_hat))
# RMSE
rmse <- sqrt(mean((valid_df$precio_500g - valid_df$precio_hat)^2))
# MAPE
mape <- mean(abs(valid_df$precio_500g - valid_df$precio_hat) / valid_df$precio_500g) * 100
rmse
mape
plot_aux = valid_df %>%
ggplot(aes(x = fecha)) +
geom_line(aes(y = precio_500g, color = "Precio real"), size = 1) +
geom_line(aes(y = precio_hat, color = "Precio estimado"), linetype = "dashed", size = 1) +
labs(
title = "Comparación entre precio real y estimado",
subtitle = paste0(
unique(valid_df$nombre_ciudad), " - ", unique(valid_df$articulo),
"\nRMSE = ", round(rmse, 2),
" | MAPE = ", round(mape, 2), "%"
),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio real" = "black", "Precio estimado" = "red")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
plot_aux
# Validar la estimación:
plot_aux = test.df2 %>%
ggplot(aes(x = fecha)) +
geom_line(aes(y = precio_500g, color = "Precio real"), size = 1) +
geom_line(aes(y = precio_hat, color = "Precio estimado"), linetype = "dashed", size = 1) +
labs(
title = "Comparación entre precio real y estimado",
subtitle = paste0(
unique(valid_df$nombre_ciudad), " - ", unique(valid_df$articulo),
"\nRMSE = ", round(rmse, 2),
" | MAPE = ", round(mape, 2), "%"
),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio real" = "black", "Precio estimado" = "red")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
plot_aux
plot_aux = test.df2 %>%
ggplot(aes(x = fecha)) +
geom_line(aes(y = precio_500g, color = "Precio real"), size = 1) +
geom_line(aes(y = precio_hat, color = "Precio estimado"), linetype = "dashed", size = 1) +
labs(
title = "Comparación entre precio real y estimado",
subtitle = paste0(
unique(valid_df$nombre_ciudad), " - ", unique(valid_df$articulo),
"\nRMSE = ", round(rmse, 2),
" | MAPE = ", round(mape, 2), "%"
),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio real" = "black", "Precio estimado" = "red")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
plot_aux
plot_aux = test.df2 %>%
ggplot(aes(x = fecha)) +
geom_line(aes(y = precio_500g, color = "Precio real"), size = 1) +
geom_line(aes(y = precio_hat, color = "Precio estimado"), linetype = "dashed", size = 1) +
labs(
title = "Comparación entre precio real y estimado",
subtitle = paste0(
unique(valid_df$nombre_ciudad), " - ", unique(valid_df$articulo),
"\nRMSE = ", round(rmse, 2),
" | MAPE = ", round(mape, 2), "%"
),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio real" = "black", "Precio estimado" = "red")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
plot_aux
getwd()
resultados_metricas = read.csv("300725_resultados_metricas_ipc.csv")
# Identificar los alimentos que tienen problemas
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
resultados_metricas = read.csv("300725_resultados_metricas_ipc.csv")
View(resultados_metricas)
head(resultados_metricas)
head(resultados_metricas)
# Asegúrate de que las columnas estén en formato numérico
resultados_metricas$rmse <- as.numeric(resultados_metricas$rmse)
resultados_metricas$mape <- as.numeric(resultados_metricas$mape)
# Alimentos con MAPE mayor a 5%
mape_5 = resultados_metricas %>% filter(mape > 5)
print("Alimentos con MAPE > 5%:")
print(mape_5)
# Alimentos con MAPE mayor a 5%
mape_5 = resultados_metricas %>% filter(mape > 5)
print("Alimentos con MAPE > 5%:")
print(mape_5)
# Alimentos con MAPE mayor a 10%
mape_10 = resultados_metricas %>% filter(mape > 10)
print("Alimentos con MAPE > 10%:")
print(mape_10)
nrow(mape_5)
nrow(resultados_metricas)
31/68*100
# Alimentos con MAPE mayor a 10%
mape_10 = resultados_metricas %>% filter(mape > 10)
print("Alimentos con MAPE > 10%:")
print(mape_10)
nrow(mape_10)
23/68*100
# Métrica global: promedio de RMSE y MAPE
# Opción 1: Promedio simple
rmse_promedio <- mean(resultados_metricas$rmse, na.rm = TRUE)
mape_promedio <- mean(resultados_metricas$mape, na.rm = TRUE)
cat("RMSE promedio:", round(rmse_promedio, 2), "\n")
cat("MAPE promedio:", round(mape_promedio, 2), "%\n")
