}
# --- Correlativa ---
ipc_subclase <- read_excel("var-ipc/XYZ_Correlativa-ENPH-IPC-2008.xlsx") %>%
clean_names() %>%
mutate(
clase      = norm_subclase_compat(clase_9),   # <- usar compat aquí
articulo   = norm_articulo(articulo_11)
) %>%
select(clase, gasto_basico, articulo, descripcion_ipc)
# --- Mapeo por subclase (compat) ---
mapeo_unico <- ipc_subclase %>%
mutate(
subclase_from_art = norm_subclase_compat(paste0(substr(articulo, 1, 6))), # 6 dígitos
subclase_from_art = paste0(substr(subclase_from_art,1,1),
substr(subclase_from_art,2,7),
substr(subclase_from_art,8,8)),  # ya queda 8 dígitos tipo 01510100
match_flag = (clase == subclase_from_art)
) %>%
group_by(articulo) %>%
slice(if (any(match_flag, na.rm = TRUE)) which.max(match_flag) else 1L) %>%
ungroup() %>%
transmute(
articulo    = norm_articulo(articulo),
subclase    = if_else(!is.na(clase) & clase == subclase_from_art,
clase, subclase_from_art),
descripcion_ipc
) %>%
distinct(articulo, .keep_all = TRUE)
# --- Precios ---
precios <- read_excel("Precios DANE/OUTPUT_DANE/precios_unadj_DANE_1999_2018.xlsx") %>%
clean_names() %>%
transmute(
anio       = as.integer(ano),
mes        = as.integer(mes_num),
ciudad     = as.character(nombre_ciudad),
articulo   = norm_articulo(codigo_articulo),
nombre_art = as.character(articulo),
precio     = as.numeric(precio_500g),
fecha      = as.Date(sprintf("%d-%02d-01", ano, mes))
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope)
# ==== Directorio de trabajo ====
setwd("C:/Users/danie/OneDrive/Escritorio/Least-cost-diets-and-affordability/Proyecto Interno")
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(purrr)
library(broom)
library(stringr)
# ==== Parámetros ====
ciudad_objetivo <- "CALI"
fecha_tope      <- as.Date("2018-03-01")
anio_base       <- 2008
# --- Normalizadores ---
norm_subclase <- function(x) {
x <- as.character(x); x <- gsub("[^0-9]", "", x)
str_pad(substr(x, 1, 8), 8, pad = "0")
}
norm_subclase_compat <- function(x) {
dig <- gsub("[^0-9]", "", as.character(x))
n <- nchar(dig)
ifelse(n == 6, paste0("0", dig, "0"),
ifelse(n >= 8, substr(dig, 1, 8),
ifelse(n == 7, paste0("0", dig),
str_pad(dig, 8, side = "right", pad = "0"))))
}
norm_articulo <- function(x) {
x <- as.character(x); gsub("[^0-9]", "", x)
}
# --- Correlativa ---
ipc_subclase <- read_excel("var-ipc/XYZ_Correlativa-ENPH-IPC-2008.xlsx") %>%
clean_names() %>%
mutate(
clase      = norm_subclase_compat(clase_9),   # <- usar compat aquí
articulo   = norm_articulo(articulo_11)
) %>%
select(clase, gasto_basico, articulo, descripcion_ipc)
# --- Mapeo por subclase (compat) ---
mapeo_unico <- ipc_subclase %>%
mutate(
subclase_from_art = norm_subclase_compat(paste0(substr(articulo, 1, 6))), # 6 dígitos
subclase_from_art = paste0(substr(subclase_from_art,1,1),
substr(subclase_from_art,2,7),
substr(subclase_from_art,8,8)),  # ya queda 8 dígitos tipo 01510100
match_flag = (clase == subclase_from_art)
) %>%
group_by(articulo) %>%
slice(if (any(match_flag, na.rm = TRUE)) which.max(match_flag) else 1L) %>%
ungroup() %>%
transmute(
articulo    = norm_articulo(articulo),
subclase    = if_else(!is.na(clase) & clase == subclase_from_art,
clase, subclase_from_art),
descripcion_ipc
) %>%
distinct(articulo, .keep_all = TRUE)
# --- Precios ---
precios <- read_excel("Precios DANE/OUTPUT_DANE/precios_unadj_DANE_1999_2018.xlsx") %>%
clean_names() %>%
transmute(
anio       = as.integer(ano),
mes        = as.integer(mes_num),
ciudad     = as.character(nombre_ciudad),
articulo   = norm_articulo(codigo_articulo),
nombre_art = as.character(articulo),
precio     = as.numeric(precio_500g),
fecha      = as.Date(sprintf("%d-%02d-01", ano, mes))
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope)
# --- IPC (compat) ---
var_ipc <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
mutate(
ciudad = recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."),
mes_num = recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha    = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
subclase = norm_subclase_compat(subclase)      # <- compat aquí también
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope) %>%
transmute(fecha, subclase, lnIPC = log(as.numeric(numero_indice))) %>%
distinct(fecha, subclase, .keep_all = TRUE)
# --- Unir precios con correlativa ---
df <- precios %>%
mutate(articulo = norm_articulo(articulo)) %>%
left_join(mapeo_unico, by = "articulo")
# --- P0 (igual) ---
p0_tabla <- df %>% filter(anio == anio_base) %>%
group_by(articulo) %>%
summarise(p0 = mean(precio, na.rm = TRUE), .groups = "drop")
fallback_p0 <- df %>% arrange(articulo, fecha) %>%
group_by(articulo) %>%
summarise(p0_fb = first(na.omit(precio)), .groups = "drop")
p0_tabla <- full_join(p0_tabla, fallback_p0, by = "articulo") %>%
mutate(p0 = if_else(is.na(p0), p0_fb, p0)) %>%
select(articulo, p0)
# --- PANEL (usar compat, no retransformar raro) ---
panel <- df %>%
mutate(subclase = norm_subclase_compat(subclase)) %>%     # <- compat aquí
filter(!is.na(subclase) & subclase != "") %>%
inner_join(var_ipc, by = c("fecha","subclase")) %>%
left_join(p0_tabla, by = "articulo") %>%
filter(!is.na(precio), !is.na(p0)) %>%
mutate(ln_rel = log(precio) - log(p0)) %>%
select(subclase, fecha, articulo, lnIPC, ln_rel)
# Conteos por etapa
n0 <- nrow(precios)                                # precios base (ciudad/fecha_tope)
n1 <- nrow(df)                                     # tras mapear a subclase
df1 <- df %>% filter(!is.na(subclase) & subclase != "")
n2_presp <- nrow(df1)
df2 <- df1 %>% inner_join(var_ipc, by = c("fecha","subclase"))
n3 <- nrow(df2)
df3 <- df2 %>% left_join(p0_tabla, by = "articulo")
n4 <- nrow(df3)
n5 <- nrow(panel)                                  # final
tibble::tibble(
etapa = c("precios", "df (join mapeo)", "df filtrado subclase !NA",
"tras join IPC", "tras join P0 (sin filtrar)", "panel final"),
n = c(n0, n1, n2_presp, n3, n4, n5)
)
# Qué artículos NO tienen subclase (caen antes del join con IPC)
faltan_mapeo <- precios %>%
left_join(mapeo_unico, by = "articulo") %>%
filter(is.na(subclase)) %>%
distinct(articulo)
# Qué pares (fecha, subclase) no encuentran IPC
sin_ipc <- df1 %>%
anti_join(var_ipc, by = c("fecha","subclase")) %>%
count(subclase, sort = TRUE)
# Qué artículos quedan sin P0
sin_p0 <- df2 %>%
left_join(p0_tabla, by = "articulo") %>%
filter(is.na(p0)) %>%
distinct(articulo)
View(sin_ipc)
View(sin_p0)
View(faltan_mapeo)
# ==== Directorio de trabajo ====
setwd("C:/Users/danie/OneDrive/Escritorio/Least-cost-diets-and-affordability/Proyecto Interno")
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(purrr)
library(broom)
library(stringr)
# ==== Parámetros ====
ciudad_objetivo <- "CALI"
fecha_tope      <- as.Date("2018-03-01")
anio_base       <- 2008
# ==== Normalizadores ====
norm_subclase <- function(x) {
x <- as.character(x); x <- gsub("[^0-9]", "", x)
str_pad(substr(x, 1, 8), 8, pad = "0")
}
norm_subclase_compat <- function(x) {
# 0 + 6 dígitos + 0 -> 8 dígitos
dig <- gsub("[^0-9]", "", as.character(x))
n <- nchar(dig)
ifelse(n == 6, paste0("0", dig, "0"),
ifelse(n >= 8, substr(dig, 1, 8),
ifelse(n == 7, paste0("0", dig),
str_pad(dig, 8, side = "right", pad = "0"))))
}
# <- NUEVO: clave de unión a 6 dígitos
subclase_to6 <- function(x) {
dig <- gsub("[^0-9]", "", as.character(x))
n <- nchar(dig)
ifelse(n >= 8, substr(dig, 2, 7),            # 01510100 -> 151010
ifelse(n == 6, dig,                   # 151010   -> 151010
ifelse(n == 7, substr(dig,1,6),
str_pad(dig, 6, pad = "0"))))
}
norm_articulo <- function(x) { x <- as.character(x); gsub("[^0-9]", "", x) }
# --- Correlativa ---
ipc_subclase <- read_excel("var-ipc/XYZ_Correlativa-ENPH-IPC-2008.xlsx") %>%
clean_names() %>%
mutate(clase = norm_subclase_compat(clase_9),      # compat 8 dígitos
articulo = norm_articulo(articulo_11)) %>%
select(clase, gasto_basico, articulo, descripcion_ipc)
# --- Mapeo por subclase (compat) ---
mapeo_unico <- ipc_subclase %>%
mutate(subclase_from_art = norm_subclase_compat(paste0(substr(articulo, 1, 6)))) %>%
mutate(subclase_from_art = paste0(substr(subclase_from_art,1,1),
substr(subclase_from_art,2,7),
substr(subclase_from_art,8,8)),
match_flag = (clase == subclase_from_art)) %>%
group_by(articulo) %>%
slice(if (any(match_flag, na.rm = TRUE)) which.max(match_flag) else 1L) %>%
ungroup() %>%
transmute(articulo = norm_articulo(articulo),
subclase = if_else(!is.na(clase) & clase == subclase_from_art,
clase, subclase_from_art),
descripcion_ipc) %>%
distinct(articulo, .keep_all = TRUE)
# --- Precios ---
precios <- read_excel("Precios DANE/OUTPUT_DANE/precios_unadj_DANE_1999_2018.xlsx") %>%
clean_names() %>%
transmute(
anio       = as.integer(ano),
mes        = as.integer(mes_num),
ciudad     = as.character(nombre_ciudad),
articulo   = norm_articulo(codigo_articulo),
nombre_art = as.character(articulo),
precio     = as.numeric(precio_500g),
fecha      = as.Date(sprintf("%d-%02d-01", ano, mes))
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope)
# --- IPC (compat) ---
var_ipc6 <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
mutate(
ciudad = recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."),
mes_num = recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha    = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
sub8     = norm_subclase_compat(subclase),
sub6     = subclase_to6(sub8)
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope) %>%
transmute(fecha, sub6, lnIPC = log(as.numeric(numero_indice))) %>%
distinct(fecha, sub6, .keep_all = TRUE)
# --- Unir precios con correlativa ---
df <- precios %>%
mutate(articulo = norm_articulo(articulo)) %>%
left_join(mapeo_unico, by = "articulo")
# --- P0 (igual) ---
p0_tabla <- df %>% filter(anio == anio_base) %>%
group_by(articulo) %>%
summarise(p0 = mean(precio, na.rm = TRUE), .groups = "drop")
fallback_p0 <- df %>% arrange(articulo, fecha) %>%
group_by(articulo) %>%
summarise(p0_fb = first(na.omit(precio)), .groups = "drop")
p0_tabla <- full_join(p0_tabla, fallback_p0, by = "articulo") %>%
mutate(p0 = if_else(is.na(p0), p0_fb, p0)) %>%
select(articulo, p0)
# --- PANEL (usar compat, no retransformar raro) ---
panel <- df %>%
mutate(
subclase8 = norm_subclase_compat(subclase),
sub6      = subclase_to6(subclase8)
) %>%
filter(!is.na(sub6), sub6 != "") %>%
inner_join(var_ipc6, by = c("fecha","sub6")) %>%
left_join(p0_tabla, by = "articulo") %>%
filter(!is.na(precio), !is.na(p0)) %>%
mutate(ln_rel = log(precio) - log(p0)) %>%
select(subclase = subclase8, fecha, articulo, lnIPC, ln_rel)
# Conteos por etapa
n0 <- nrow(precios)                                # precios base (ciudad/fecha_tope)
n1 <- nrow(df)                                     # tras mapear a subclase
df1 <- df %>% filter(!is.na(subclase) & subclase != "")
n2_presp <- nrow(df1)
df2 <- df1 %>% inner_join(var_ipc, by = c("fecha","subclase"))
# Conteos por etapa
n0 <- nrow(precios)                                # precios base (ciudad/fecha_tope)
n1 <- nrow(df)                                     # tras mapear a subclase
df1 <- df %>% filter(!is.na(subclase) & subclase != "")
n2_presp <- nrow(df1)
df2 <- df1 %>% inner_join(var_ipc6, by = c("fecha","subclase"))
View(var_ipc6)
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
library(stringr)
# --- Helpers ya usados ---
subclase_to6 <- function(x){
dig <- gsub("[^0-9]","",as.character(x))
n <- nchar(dig)
ifelse(n >= 8, substr(dig,2,7),
ifelse(n == 6, dig,
ifelse(n == 7, substr(dig,1,6),
str_pad(dig,6,pad="0"))))
}
norm_subclase_compat <- function(x){
dig <- gsub("[^0-9]","",as.character(x))
n <- nchar(dig)
ifelse(n == 6, paste0("0",dig,"0"),
ifelse(n >= 8, substr(dig,1,8),
ifelse(n == 7, paste0("0",dig),
str_pad(dig,8,side="right",pad="0"))))
}
# =============================
# A) ¿Qué CIUDADES hay en IPC.xls?
# =============================
ipc_ciudades <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
count(ciudad, sort = TRUE)
ipc_ciudades
# Si ves "SANTIAGO DE CALI" en vez de "CALI", cámbialo en tu recode o en ciudad_objetivo.
# =============================
# B) Subclases disponibles en IPC para la ciudad (código 6 dígitos)
# =============================
ipc_cali_sub6 <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
mutate(
ciudad = recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."),
mes_num = recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
sub8  = norm_subclase_compat(subclase),
sub6  = subclase_to6(sub8)
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope) %>%
count(sub6, name = "n_meses_ipc") %>%
arrange(desc(n_meses_ipc))
n_distinct(ipc_cali_sub6$sub6)      # <- cuántas subclases tiene realmente IPC para CALI
head(ipc_cali_sub6, 20)
# =============================
# C) Subclases que aparecen en tus PRECIOS (df) mapeados
# =============================
df_sub6 <- df %>%
mutate(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8)) %>%
filter(!is.na(sub6), sub6 != "") %>%
count(sub6, name = "n_meses_df")
# =============================
# D) Comparación directa (qué falta en IPC vs lo que tienes en df)
# =============================
comparador_sub6 <- df_sub6 %>%
full_join(ipc_cali_sub6, by = "sub6") %>%
mutate(
n_meses_df  = coalesce(n_meses_df, 0L),
n_meses_ipc = coalesce(n_meses_ipc, 0L),
estado = case_when(
n_meses_df > 0 & n_meses_ipc == 0 ~ "NO existe en IPC (CALI)",
n_meses_df > 0 & n_meses_ipc > 0  ~ "OK: debería unir",
n_meses_df == 0 & n_meses_ipc > 0 ~ "IPC tiene, df no",
TRUE                              ~ "Sin info"
)
) %>%
arrange(desc(estado), desc(n_meses_df))
comparador_sub6 %>% count(estado)
faltan_en_ipc <- comparador_sub6 %>% filter(estado == "NO existe en IPC (CALI)")
head(faltan_en_ipc, 30)
# Para darles nombre (si mapeo_unico trae descripciones):
catalogo_desc <- mapeo_unico %>%
transmute(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8),
descripcion_ipc) %>%
distinct(sub6, .keep_all = TRUE)
faltan_en_ipc %>%
left_join(catalogo_desc, by = "sub6") %>%
select(sub6, descripcion_ipc, n_meses_df) %>%
arrange(desc(n_meses_df)) %>%
head(50)
# =============================
# E) Huecos por FECHA para una subclase que SÍ está en IPC
# =============================
ver_huecos_sub6 <- function(sub6_id){
# calendario completo de meses en rango
seq_meses <- tibble(fecha = seq.Date(from = min(df$fecha), to = fecha_tope, by = "month"))
ipc_m <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
mutate(
ciudad = recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."),
mes_num = recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
sub8  = norm_subclase_compat(subclase),
sub6  = subclase_to6(sub8)
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope, sub6 == sub6_id) %>%
distinct(fecha) %>%
mutate(en_ipc = TRUE)
df_m <- df %>%
mutate(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8)) %>%
filter(sub6 == sub6_id) %>%
distinct(fecha) %>%
mutate(en_df = TRUE)
seq_meses %>%
left_join(ipc_m, by = "fecha") %>%
left_join(df_m,  by = "fecha") %>%
mutate(match = !is.na(en_ipc) & !is.na(en_df))
}
View(df_sub6)
View(faltan_en_ipc)
View(catalogo_desc)
# Para darles nombre (si mapeo_unico trae descripciones):
catalogo_desc <- mapeo_unico %>%
transmute(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8),
descripcion_ipc) %>%
distinct(sub6, .keep_all = TRUE)
faltan_en_ipc %>%
left_join(catalogo_desc, by = "sub6") %>%
select(sub6, descripcion_ipc, n_meses_df) %>%
arrange(desc(n_meses_df)) %>%
head(50)
faltan_en_ipc
catalogo_desc <- mapeo_unico %>%
transmute(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8),
descripcion_ipc) %>%
distinct(sub6, .keep_all = TRUE)
faltan_en_ipc %>%
left_join(catalogo_desc, by = "sub6") %>%
select(sub6, descripcion_ipc, n_meses_df) %>%
arrange(desc(n_meses_df)) %>%
head(50)
# =============================
# E) Huecos por FECHA para una subclase que SÍ está en IPC
# =============================
ver_huecos_sub6 <- function(sub6_id){
# calendario completo de meses en rango
seq_meses <- tibble(fecha = seq.Date(from = min(df$fecha), to = fecha_tope, by = "month"))
ipc_m <- read_excel("var-ipc/IPC.xls") %>%
clean_names() %>%
mutate(
ciudad = recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."),
mes_num = recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
sub8  = norm_subclase_compat(subclase),
sub6  = subclase_to6(sub8)
) %>%
filter(ciudad == ciudad_objetivo, fecha <= fecha_tope, sub6 == sub6_id) %>%
distinct(fecha) %>%
mutate(en_ipc = TRUE)
df_m <- df %>%
mutate(sub8 = norm_subclase_compat(subclase),
sub6 = subclase_to6(sub8)) %>%
filter(sub6 == sub6_id) %>%
distinct(fecha) %>%
mutate(en_df = TRUE)
seq_meses %>%
left_join(ipc_m, by = "fecha") %>%
left_join(df_m,  by = "fecha") %>%
mutate(match = !is.na(en_ipc) & !is.na(en_df))
}
ver_huecos_sub6
# --- Lista de sub6 que te faltan en CALI (usa tu objeto 'faltan_en_ipc$sub6')
codigos_faltantes <- unique(faltan_en_ipc$sub6)
# --- ¿Existen esos códigos en el IPC.xls en alguna ciudad?
buscar_en_todas <- readxl::read_excel("var-ipc/IPC.xls") %>%
janitor::clean_names() %>%
dplyr::mutate(
ciudad = dplyr::recode(ciudad,
"CARTAGENA DE INDIAS" = "CARTAGENA",
"BOGOTÁ, D.C."        = "BOGOTÁ D.C."
),
mes_num = dplyr::recode(mes,
"Ene"=1,"Feb"=2,"Mar"=3,"Abr"=4,"May"=5,"Jun"=6,
"Jul"=7,"Ago"=8,"Sep"=9,"Oct"=10,"Nov"=11,"Dic"=12),
fecha = as.Date(sprintf("%d-%02d-01", as.integer(ano), mes_num)),
sub8  = norm_subclase_compat(subclase),
sub6  = subclase_to6(sub8)
) %>%
dplyr::filter(fecha <= fecha_tope, sub6 %in% codigos_faltantes) %>%
dplyr::count(ciudad, sub6, name = "n_meses") %>%
dplyr::arrange(sub6, desc(n_meses))
# -> Si una sub6 aparece en otras ciudades pero no en CALI,
#    tu archivo de CALI está incompleto para esas subclases.
buscar_en_todas %>% dplyr::group_by(sub6) %>% dplyr::summarise(ciudades_con_datos = n())
