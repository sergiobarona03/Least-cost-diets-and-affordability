),
x = "Fecha",
y = "Precio (500g)",
color = " "
) +
scale_color_manual(values = c("Precio minorista" = "black", "Precio estimado" = "red",
"Precio mayorista" = "darkgreen")) +
theme_bw() +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold")
)
print(plot_aux)
ggsave(plot = plot_aux,
filename = paste0("margen-dist/output-ciudades/CALI/price_hat_producto/",
unique(test.df2$sipsa),".png"),
dpi = 300, height = 12, width = 12)
}
}
}
readr::write_csv(resultados_metricas, "margen-dist/output-ciudades/CALI/300725_resultados_metricas_ipc.csv")
# Cargar librerías
library(lubridate)
library(tidyverse)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
##------------------------------------##
## Cargar datos de precios mayoristas ##
##------------------------------------##
# Lista output
whole_list = vector(mode = "list", length = length(2013:2024))
# Cargar series de sipsa
for (k in 2013:2018) {
whole_list[[k]] = readRDS(paste0("Precios al por mayor\\Bases historicas\\", k,".rds"))
}
# whole_18 significa whole hasta 2018
whole_18 <- do.call(rbind, whole_list)
# Identificar los mercados de las principales ciudades
whole_18 <- whole_18 %>%
mutate(nombre_ciudad = case_when(
str_detect(Mercado, regex("Barranquilla", ignore_case = TRUE)) ~ "BARRANQUILLA",
str_detect(Mercado, regex("Bogotá", ignore_case = TRUE)) ~ "BOGOTÁ D.C.",
str_detect(Mercado, regex("Bucaramanga", ignore_case = TRUE)) ~ "BUCARAMANGA",
str_detect(Mercado, regex("Cali", ignore_case = TRUE)) ~ "CALI",
str_detect(Mercado, regex("Cartagena", ignore_case = TRUE)) ~ "CARTAGENA",
str_detect(Mercado, regex("Cúcuta", ignore_case = TRUE)) ~ "CÚCUTA",
str_detect(Mercado, regex("Manizales", ignore_case = TRUE)) ~ "MANIZALES",
str_detect(Mercado, regex("Medellín", ignore_case = TRUE)) ~ "MEDELLÍN",
str_detect(Mercado, regex("Montería", ignore_case = TRUE)) ~ "MONTERÍA",
str_detect(Mercado, regex("Neiva", ignore_case = TRUE)) ~ "NEIVA",
str_detect(Mercado, regex("Pasto", ignore_case = TRUE)) ~ "PASTO",
str_detect(Mercado, regex("Pereira", ignore_case = TRUE)) ~ "PEREIRA",
str_detect(Mercado, regex("Villavicencio", ignore_case = TRUE)) ~ "VILLAVICENCIO",
TRUE ~ NA_character_
))
# Filtrar para las 13 ciudades principales
whole_18 <- whole_18 %>% filter(!is.na(nombre_ciudad))
# Armonizar los nombres de las ciudades (código DIVIPOLA)
whole_18 <- whole_18 %>%
mutate(cod_mun = case_when(
nombre_ciudad == "BARRANQUILLA"   ~ "08001",
nombre_ciudad == "BOGOTÁ D.C."    ~ "11001",
nombre_ciudad == "BUCARAMANGA"    ~ "68001",
nombre_ciudad == "CALI"           ~ "76001",
nombre_ciudad == "CARTAGENA"      ~ "13001",
nombre_ciudad == "CÚCUTA"         ~ "54001",
nombre_ciudad == "MANIZALES"      ~ "17001",
nombre_ciudad == "MEDELLÍN"       ~ "05001",
nombre_ciudad == "MONTERÍA"       ~ "23001",
nombre_ciudad == "NEIVA"          ~ "41001",
nombre_ciudad == "PASTO"          ~ "52001",
nombre_ciudad == "PEREIRA"        ~ "66001",
nombre_ciudad == "VILLAVICENCIO"  ~ "50001",
TRUE ~ NA_character_
))
# Antes de calcular el precio medio, se armonizan las unidad (P500g)
# El precio
whole_18 <- whole_18 %>%
mutate(
precio_500g = case_when(
str_detect(Alimento, regex("aceite", ignore_case = TRUE)) ~ Precio_kg * (500 / 920),
Alimento %in% c("Huevo blanco A", "Huevo rojo A") ~ Precio_kg * (500 / 50),
Alimento %in% c("Huevo blanco AA", "Huevo rojo AA") ~ Precio_kg * (500 / 60),
Alimento %in% c("Huevo blanco extra", "Huevo rojo extra") ~ Precio_kg * (500 / 67),
TRUE ~ Precio_kg / 2  # Por defecto, mitad del precio por kg
)
) %>%
filter(!Alimento %in% c("Jugo de frutas", "Bocadillo veleño", "Vinagre",
"Huevo blanco B", "Huevo rojo B"))
# Crear el precio promedio para cada alimento según: año, mes, ciudad, alimento
whole_18_mean <- whole_18 %>% group_by(Year, Month, cod_mun, Alimento) %>%
summarise(precio_medio = mean(precio_500g, na.rm = TRUE))
##------------------------------------##
## Cargar mapeo: DANE (IPC) - SIPSA   ##
##------------------------------------##
# Cargar el mapeo de ambas bases:
ipc_sipsa = readxl::read_excel("Time-series\\mapeo_retail_sipsa.xlsx")
# Añadir al mayorista las denominaciones de sipsa
whole_18_mean = whole_18_mean %>% left_join(ipc_sipsa, by = c("Alimento" = "sipsa"))
# Cargar la distribución del margen
q1_q3_productos = read.csv("margen-dist/output-ciudades/CALI/300725_q1_q3_margen_producto.csv")
# Añadir el margen (q1-q3) a la base de datos
whole_18_mean = merge(whole_18_mean,q1_q3_productos, by = "articulo")
whole_18_mean$retail
q1_q3_productos
head(q1_q3_productos
)
colnames(whole_18_mean)
colnames(q1_q3_productos)
# Añadir el margen (q1-q3) a la base de datos
whole_18_mean = merge(whole_18_mean,q1_q3_productos, by.x = "retail",
by.y = "articulo")
View(whole_18_mean)
whole_18_mean$m_q1
whole_18_mean$precio_medio
# Estimación de precios minoristas
whole_18_mean$precio_hat_q1 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q1/100))
whole_18_mean$precio_hat_q2 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q2/100))
whole_18_mean$precio_hat_q3 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q3/100))
View(whole_18_mean)
colnames(whole_18_mean)
View(whole_18_mean)
levels(as.factor(whole_18_mean$cod_mun))
input_cali = whole_18_mean %>% filter(cod_mun == "76001") %>%
rename(food_sipsa = Alimento, year = Year, month = Month) %>%
select(cod_mun, year, month, food_sipsa, m_q1,
m_q2, m_q3, precio_hat_q1,
precio_hat_q2, precio_hat_q3)
View(input_cali)
readr::write_csv(input_cali,
"estimadores-banrep/CALI/input/010825_q1_q3_price_data_cali.csv")
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar datos de precios estimados
input_cali_hat = read.csv("estimadores-banrep/CALI/input/010825_q1_q3_price_data_cali.csv")
file.choose()
# Cargar datos de composición nutricional
sipsa_tcac = readxl::read_excel("composicion-nut/1823_mapeo_sipsa_tcac v1.0_2025.xlsx")
sipsa_tcac
View(sipsa_tcac)
# Cargar datos de composición nutricional
sipsa_tcac = readxl::read_excel("composicion-nut/1823_mapeo_sipsa_tcac v1.0_2025.xlsx") %>%
janitor::clean_names()
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(5/pc),
precio_q1_100g = precio_hat_q1*(5/pc),
precio_q1_100g = precio_hat_q1*(5/pc))
ncol(sipsa_tcac)
View(sipsa_tcac[,-35:39])
View(sipsa_tcac[,-35:39])
sipsa_tcac[,-35:39]
sipsa_tcac[,-(35:39)]
View(sipsa_tcac[,-(35:39)])
# Cargar datos de composición nutricional
sipsa_tcac = readxl::read_excel("composicion-nut/1823_mapeo_sipsa_tcac v1.0_2025.xlsx") %>%
janitor::clean_names() %>% rename(food_sipsa = alimento_nombre_sipsa)
# Unir ambas bases de datos
input_cali_hat = input_cali_hat %>% left_join(sipsa_tcac[,-(35:39)],
by = "food_sipsa")
View(input_cali_hat)
# Seleccionar variables y eliminar duplicados
sipsa_tcac = sipsa_tcac[,-(35:39)] %>% select(-c("nombre_original",
"nota_de_codificacion",
"factor_de_conversion"))
sipsa_tcac
View(sipsa_tcac)
# Unir ambas bases de datos
input_cali_hat = input_cali_hat %>% left_join(sipsa_tcac[,-(35:39)],
by = "food_sipsa")
# Seleccionar variables y eliminar duplicados
sipsa_tcac = sipsa_tcac[,-(35:39)] %>% select(-c("nombre_original",
"nota_de_codificacion",
"factor_de_conversion")) %>%
distinct()
# Cargar datos de precios estimados
input_cali_hat = read.csv("estimadores-banrep/CALI/input/010825_q1_q3_price_data_cali.csv")
# Cargar datos de composición nutricional
sipsa_tcac = readxl::read_excel("composicion-nut/1823_mapeo_sipsa_tcac v1.0_2025.xlsx") %>%
janitor::clean_names() %>% rename(food_sipsa = alimento_nombre_sipsa)
# Seleccionar variables y eliminar duplicados
sipsa_tcac = sipsa_tcac[,-(35:39)] %>% select(-c("nombre_original",
"nota_de_codificacion",
"factor_de_conversion")) %>%
distinct()
# Unir ambas bases de datos
input_cali_hat = input_cali_hat %>% left_join(sipsa_tcac[,-(35:39)],
by = "food_sipsa")
# Unir ambas bases de datos
input_cali_hat = input_cali_hat %>% left_join(sipsa_tcac,
by = "food_sipsa")
View(input_cali_hat)
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(5/pc),
precio_q1_100g = precio_hat_q1*(5/pc),
precio_q1_100g = precio_hat_q1*(5/pc))
View(input_cali_hat %>% select(food_sipsa, precio_hat_q1, precio_q1_100g, pc))
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(100/5pc),
precio_q1_100g = precio_hat_q1*(100/5pc),
precio_q1_100g = precio_hat_q1*(100/5pc))
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(100/5*pc),
precio_q1_100g = precio_hat_q1*(100/5*pc),
precio_q1_100g = precio_hat_q1*(100/5*pc))
View(input_cali_hat)
View(input_cali_hat %>% select(food_sipsa, precio_hat_q1, precio_q1_100g, pc))
input_cali_hat$parte_comestible_percent
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(100/(5*pc)),
precio_q2_100g = precio_hat_q2*(100/(5*pc)),
precio_q3_100g = precio_hat_q3*(100/(5*pc)))
input_cali_hat$parte_comestible_percent
View(input_cali_hat %>% select(food_sipsa, precio_hat_q1, precio_q1_100g, pc))
readr::write_csv(input_cali_hat,
"estimadores-banrep/CALI/input/010825_q1_q3_comp_price_data_cali.csv")
# Para la estimación, utilizamos el paquete Foodprice
library(FoodpriceR)
# Para la estimación, utilizamos el paquete Foodprice
library(devtools)
install.packages("devtools")
# Para la estimación, utilizamos el paquete Foodprice
library(devtools)
devtools::install_github("lea-puj/FoodpriceR")
# Cargar base de datos de entrada
input_cali_hat = read.csv("estimadores-banrep/CALI/input/010825_q1_q3_comp_price_data_cali.csv")
input_cali_hat
View(input_cali_hat)
library(FoodpriceR)
View(FoodpriceR::data_example)
colnames(input_cali_hat)
# Estimación en escenario 1: margen en q1
data_case1 = input_cali_hat %>% mutate(Food = food_sipsa,
Price_100g = precio_hat_q1,
Serving = 100,
Energy = energia_kcal)
data_case1
View(data_case1)
# Definir fechas
data_case1$fecha = as.Date(paste(data_case1$year,
data_case1$month,
"01", sep = "-"))
data_case1$fecha
# Definir fechas
data_case1$fecha = as.Date(paste(data_case1$year,
data_case1$month,
"01", sep = "-"))
fecha_min <- min(data_case1$fecha, na.rm = TRUE)
fecha_max <- max(data_case1$fecha, na.rm = TRUE)
fecha_min
fecha_max
secuencia_fechas <- seq(from = fecha_min, to = fecha_max, by = "month")
secuencia_fechas
#####################################################
#####################################################
## Prueba: preparación de base de datos de precios ##
#####################################################
#####################################################
# Cargar librerías
library(lubridate)
library(tidyverse)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
##------------------------------------##
## Cargar datos de precios mayoristas ##
##------------------------------------##
# Lista output
whole_list = vector(mode = "list", length = length(2013:2024))
# Cargar series de sipsa
for (k in 2013:2024) {
whole_list[[k]] = readRDS(paste0("Precios al por mayor\\Bases historicas\\", k,".rds"))
}
# whole_18 significa whole hasta 2018
whole_18 <- do.call(rbind, whole_list)
# Identificar los mercados de las principales ciudades
whole_18 <- whole_18 %>%
mutate(nombre_ciudad = case_when(
str_detect(Mercado, regex("Barranquilla", ignore_case = TRUE)) ~ "BARRANQUILLA",
str_detect(Mercado, regex("Bogotá", ignore_case = TRUE)) ~ "BOGOTÁ D.C.",
str_detect(Mercado, regex("Bucaramanga", ignore_case = TRUE)) ~ "BUCARAMANGA",
str_detect(Mercado, regex("Cali", ignore_case = TRUE)) ~ "CALI",
str_detect(Mercado, regex("Cartagena", ignore_case = TRUE)) ~ "CARTAGENA",
str_detect(Mercado, regex("Cúcuta", ignore_case = TRUE)) ~ "CÚCUTA",
str_detect(Mercado, regex("Manizales", ignore_case = TRUE)) ~ "MANIZALES",
str_detect(Mercado, regex("Medellín", ignore_case = TRUE)) ~ "MEDELLÍN",
str_detect(Mercado, regex("Montería", ignore_case = TRUE)) ~ "MONTERÍA",
str_detect(Mercado, regex("Neiva", ignore_case = TRUE)) ~ "NEIVA",
str_detect(Mercado, regex("Pasto", ignore_case = TRUE)) ~ "PASTO",
str_detect(Mercado, regex("Pereira", ignore_case = TRUE)) ~ "PEREIRA",
str_detect(Mercado, regex("Villavicencio", ignore_case = TRUE)) ~ "VILLAVICENCIO",
TRUE ~ NA_character_
))
# Filtrar para las 13 ciudades principales
whole_18 <- whole_18 %>% filter(!is.na(nombre_ciudad))
# Armonizar los nombres de las ciudades (código DIVIPOLA)
whole_18 <- whole_18 %>%
mutate(cod_mun = case_when(
nombre_ciudad == "BARRANQUILLA"   ~ "08001",
nombre_ciudad == "BOGOTÁ D.C."    ~ "11001",
nombre_ciudad == "BUCARAMANGA"    ~ "68001",
nombre_ciudad == "CALI"           ~ "76001",
nombre_ciudad == "CARTAGENA"      ~ "13001",
nombre_ciudad == "CÚCUTA"         ~ "54001",
nombre_ciudad == "MANIZALES"      ~ "17001",
nombre_ciudad == "MEDELLÍN"       ~ "05001",
nombre_ciudad == "MONTERÍA"       ~ "23001",
nombre_ciudad == "NEIVA"          ~ "41001",
nombre_ciudad == "PASTO"          ~ "52001",
nombre_ciudad == "PEREIRA"        ~ "66001",
nombre_ciudad == "VILLAVICENCIO"  ~ "50001",
TRUE ~ NA_character_
))
# Antes de calcular el precio medio, se armonizan las unidad (P500g)
# El precio
whole_18 <- whole_18 %>%
mutate(
precio_500g = case_when(
str_detect(Alimento, regex("aceite", ignore_case = TRUE)) ~ Precio_kg * (500 / 920),
Alimento %in% c("Huevo blanco A", "Huevo rojo A") ~ Precio_kg * (500 / 50),
Alimento %in% c("Huevo blanco AA", "Huevo rojo AA") ~ Precio_kg * (500 / 60),
Alimento %in% c("Huevo blanco extra", "Huevo rojo extra") ~ Precio_kg * (500 / 67),
TRUE ~ Precio_kg / 2  # Por defecto, mitad del precio por kg
)
) %>%
filter(!Alimento %in% c("Jugo de frutas", "Bocadillo veleño", "Vinagre",
"Huevo blanco B", "Huevo rojo B"))
# Crear el precio promedio para cada alimento según: año, mes, ciudad, alimento
whole_18_mean <- whole_18 %>% group_by(Year, Month, cod_mun, Alimento) %>%
summarise(precio_medio = mean(precio_500g, na.rm = TRUE))
##------------------------------------##
## Cargar mapeo: DANE (IPC) - SIPSA   ##
##------------------------------------##
# Cargar el mapeo de ambas bases:
ipc_sipsa = readxl::read_excel("Time-series\\mapeo_retail_sipsa.xlsx")
# Añadir al mayorista las denominaciones de sipsa
whole_18_mean = whole_18_mean %>% left_join(ipc_sipsa, by = c("Alimento" = "sipsa"))
##----------------------------------------------------##
## Cargar margen de comercialización por artículo     ##
##----------------------------------------------------##
# Cargar la distribución del margen
q1_q3_productos = read.csv("margen-dist/output-ciudades/CALI/300725_q1_q3_margen_producto.csv")
# Añadir el margen (q1-q3) a la base de datos
whole_18_mean = merge(whole_18_mean,q1_q3_productos, by.x = "retail",
by.y = "articulo")
# Estimación de precios minoristas
whole_18_mean$precio_hat_q1 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q1/100))
whole_18_mean$precio_hat_q2 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q2/100))
whole_18_mean$precio_hat_q3 = whole_18_mean$precio_medio*(1+(whole_18_mean$m_q3/100))
# Guardar input para cali
input_cali = whole_18_mean %>% filter(cod_mun == "76001") %>%
rename(food_sipsa = Alimento, year = Year, month = Month) %>%
select(cod_mun, year, month, food_sipsa, m_q1,
m_q2, m_q3, precio_hat_q1,
precio_hat_q2, precio_hat_q3)
readr::write_csv(input_cali,
"estimadores-banrep/CALI/input/010825_q1_q3_price_data_cali.csv")
#####################################################################
#####################################################################
## Prueba: preparación de base de datos de composición nutricional ##
#####################################################################
#####################################################################
# Cargar librerías
library(lubridate)
library(tidyverse)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
##-------------------------------------------##
## Cargar base de datos de precios estimados ##
##-------------------------------------------##
# Cargar datos de precios estimados
input_cali_hat = read.csv("estimadores-banrep/CALI/input/010825_q1_q3_price_data_cali.csv")
##-------------------------------------------------##
## Cargar base de datos de composición nutricional ##
##-------------------------------------------------##
# Cargar datos de composición nutricional
sipsa_tcac = readxl::read_excel("composicion-nut/1823_mapeo_sipsa_tcac v1.0_2025.xlsx") %>%
janitor::clean_names() %>% rename(food_sipsa = alimento_nombre_sipsa)
# Seleccionar variables y eliminar duplicados
sipsa_tcac = sipsa_tcac[,-(35:39)] %>% select(-c("nombre_original",
"nota_de_codificacion",
"factor_de_conversion")) %>%
distinct()
# Unir ambas bases de datos
input_cali_hat = input_cali_hat %>% left_join(sipsa_tcac,
by = "food_sipsa")
# Conversión a 100 gramos en parte comestible
input_cali_hat = input_cali_hat %>%
mutate(
pc = parte_comestible_percent,
precio_q1_100g = precio_hat_q1*(100/(5*pc)),
precio_q2_100g = precio_hat_q2*(100/(5*pc)),
precio_q3_100g = precio_hat_q3*(100/(5*pc)))
readr::write_csv(input_cali_hat,
"estimadores-banrep/CALI/input/010825_q1_q3_comp_price_data_cali.csv")
# Cargar librerías
library(lubridate)
library(tidyverse)
# Para la estimación, utilizamos el paquete Foodprice
library(devtools)
devtools::install_github("lea-puj/FoodpriceR")
library(FoodpriceR)
# Para la estimación, utilizamos el paquete Foodprice
# library(devtools)
# devtools::install_github("lea-puj/FoodpriceR")
library(FoodpriceR)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar base de datos de entrada
input_cali_hat = read.csv("estimadores-banrep/CALI/input/010825_q1_q3_comp_price_data_cali.csv")
# Estimación en escenario 1: margen en q1
data_case1 = input_cali_hat %>% mutate(Food = food_sipsa,
Price_100g = precio_hat_q1,
Serving = 100,
Energy = energia_kcal)
# Definir fechas
data_case1$fecha = as.Date(paste(data_case1$year,
data_case1$month,
"01", sep = "-"))
fecha_min <- min(data_case1$fecha, na.rm = TRUE)
fecha_max <- max(data_case1$fecha, na.rm = TRUE)
secuencia_fechas <- seq(from = fecha_min, to = fecha_max, by = "month")
secuencia_fechas
df.aux = data_case1 %>% filter(fecha == t)
fecha
t = secuencia_fechas[1]
df.aux = data_case1 %>% filter(fecha == t)
df.aux
case1_output = vector(mode = "list", length = length(secuencia_fechas))
t = 1
df.aux = data_case1 %>% filter(fecha == secuencia_fechas[t]) %>% select(Food, Price_100g,
Serving, Energy)
df.aux
df.aux = data_case1 %>% filter(fecha == secuencia_fechas[t]) %>% select(Food, Price_100g,
Serving, Energy) %>%
filter(!is.na(Price_100g)) %>% filter(!is.na(Energy))
df.aux
coca.aux = FoodpriceR::CoCA(data = df.aux, EER = EER)
coca.aux
secuencia_fechas
case1_output[[t]] = coca.aux
case1_output
case1_output[[1]]
case1_output[[t]] = coca.aux$cost
case1_output
case1_output[[1]]
df.aux
# Cargar librerías
library(lubridate)
library(tidyverse)
library(FoodpriceR)
# Definir directorio de trabajo
setwd("C:\\Users\\Portatil\\Desktop\\Least-cost-diets-and-affordability\\Proyecto Interno\\")
# Cargar base de datos
input_cali_hat <- read.csv("estimadores-banrep/CALI/input/010825_q1_q3_comp_price_data_cali.csv")
# Vector de nombres para las variables de precio en los tres escenarios
escenarios <- c("precio_hat_q1", "precio_hat_q2", "precio_hat_q3")
resultados <- list()
# Bucle generalizado para cada escenario
for (k in 1:3) {
# Nombre de la variable de precio actual
var_precio <- escenarios[k]
# Crear data frame para este caso
data_k <- input_cali_hat %>%
mutate(
Food = food_sipsa,
Price_100g = .data[[var_precio]],  # Referencia dinámica a la columna
Serving = 100,
Energy = energia_kcal,
fecha = as.Date(paste(year, month, "01", sep = "-"))
)
# Secuencia de fechas
fechas_k <- seq(min(data_k$fecha, na.rm = TRUE),
max(data_k$fecha, na.rm = TRUE),
by = "month")
# Vector para almacenar resultados
output_k <- vector(mode = "list", length = length(fechas_k))
# Loop de estimación
for (t in seq_along(fechas_k)) {
df.aux <- data_k %>%
filter(fecha == fechas_k[t]) %>%
select(Food, Price_100g, Serving, Energy) %>%
filter(!is.na(Price_100g), !is.na(Energy))
# Calcular CoCA
coca.aux <- FoodpriceR::CoCA(data = df.aux, EER = EER)
output_k[[t]] <- coca.aux$cost
}
# Guardar resultados en la lista principal
resultados[[k]] <- tibble(
fecha = fechas_k,
CoCA = unlist(output_k),
escenario = var_precio
)
}
# Combinar en un solo data frame
resultados_coca <- bind_rows(resultados)
# Vista previa
head(resultados_coca)
resultados
